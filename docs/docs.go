// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Auth",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/callback": {
            "post": {
                "description": "AuthCallback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "AuthCallback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth/gettoken": {
            "post": {
                "description": "GetToken",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "GetToken",
                "parameters": [
                    {
                        "description": "AuthParams",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.AuthParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AuthResponse"
                        }
                    }
                }
            }
        },
        "/auth2/callback": {
            "get": {
                "description": "Handles the OAuth2 callback from Keycloak",
                "produces": [
                    "text/plain"
                ],
                "summary": "Handles authentication callback",
                "responses": {
                    "200": {
                        "description": "Authentication successful!",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth2/login": {
            "get": {
                "description": "Redirects to Keycloak login page",
                "produces": [
                    "text/html"
                ],
                "summary": "Initiates login process",
                "responses": {
                    "302": {
                        "description": "Redirects to Keycloak login page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth2/logout": {
            "get": {
                "description": "Logs out the user from Keycloak",
                "produces": [
                    "text/html"
                ],
                "summary": "Logs out the user",
                "responses": {
                    "302": {
                        "description": "Redirects to Keycloak logout",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/cats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all cats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get all cats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.JSONResultList"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Insert a Cat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Create Cat",
                "parameters": [
                    {
                        "description": "cat",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.Cat"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.JSONResult"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AuthResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.JSONResult": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/services.Cat"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "controller.JSONResultList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.Cat"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "services.AuthParams": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "test"
                },
                "username": {
                    "type": "string",
                    "example": "appuser"
                }
            }
        },
        "services.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer",
                    "example": 300
                },
                "refresh_expires_in": {
                    "type": "integer",
                    "example": 1800
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "services.Cat": {
            "type": "object",
            "required": [
                "age",
                "breed",
                "name"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "maximum": 25,
                    "minimum": 0
                },
                "breed": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8082",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
