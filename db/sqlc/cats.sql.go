// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: cats.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCat = `-- name: CreateCat :execresult
INSERT INTO ` + "`" + `cats` + "`" + ` (` + "`" + `name` + "`" + `, ` + "`" + `age` + "`" + `, ` + "`" + `breed` + "`" + `) 
VALUES (?, ?, ?)
`

type CreateCatParams struct {
	Name  string
	Age   int8
	Breed string
}

func (q *Queries) CreateCat(ctx context.Context, arg CreateCatParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCat, arg.Name, arg.Age, arg.Breed)
}

const listCats = `-- name: ListCats :many
SELECT id, name, age, breed FROM cats ORDER BY ` + "`" + `id` + "`" + ` DESC LIMIT 10
`

func (q *Queries) ListCats(ctx context.Context) ([]Cat, error) {
	rows, err := q.db.QueryContext(ctx, listCats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cat
	for rows.Next() {
		var i Cat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Age,
			&i.Breed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
